# -*- coding: utf-8 -*-
"""root_finding_benchmark-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sblia0kqZSLaZmiOcAQM4mPTVEZDlwXY
"""

import zipfile
import os


with zipfile.ZipFile("/content/GPUPy.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")


os.listdir("/content/")

import sys
sys.path.append("/content")

import GPUPy
from GPUPy.src.numerical_methods.root_finding import bisection
import time

# Define a custom benchmark function for this specific case
def custom_benchmark(method, func, a, b, repeats=5, **kwargs):
    """Custom benchmark that verifies sign change before each call."""
    # Verify sign change
    fa = func(a)
    fb = func(b)
    if fa * fb >= 0:
        raise ValueError("Function values at interval endpoints must have opposite signs.")

    # Now time the method calls
    durations = []
    for _ in range(repeats):
        start = time.perf_counter()
        method(func, a, b, **kwargs)
        durations.append(time.perf_counter() - start)

    avg_time = sum(durations) / repeats
    return avg_time

# Simple polynomial with guaranteed sign change
def simple_poly(x):
    return x**3 - 2*x - 5  # f(-2) < 0, f(3) > 0

# Try with custom benchmark
cpu_time = custom_benchmark(
    bisection,
    simple_poly,
    a=-2,
    b=3,
    tolerance=1e-6,
    max_iterations=100,
    use_gpu=False
)

gpu_time = custom_benchmark(
    bisection,
    simple_poly,
    a=-2,
    b=3,
    tolerance=1e-6,
    max_iterations=100,
    use_gpu=True
)

print(f"Simple Poly Bisection CPU Time: {cpu_time:.6f} seconds")
print(f"Simple Poly Bisection GPU Time: {gpu_time:.6f} seconds")

from GPUPy.src.numerical_methods.root_finding import newton_raphson
import numpy as np
# Sinüs fonksiyonları
def sin_func(x):
    return np.sin(x)

def d_sin_func(x):
    return np.cos(x)

# CPU time
cpu_time_sin = GPUPy.benchmark(newton_raphson, sin_func, d_sin_func, x0=3, tol=1e-6, max_iter=100, use_gpu=False)

# GPU time
gpu_time_sin = GPUPy.benchmark(newton_raphson, sin_func, d_sin_func, x0=3, tol=1e-6, max_iter=100, use_gpu=True)

print(f"Sin Function Newton-Raphson CPU Time: {cpu_time_sin:.6f} seconds")
print(f"Sin Function Newton-Raphson GPU Time: {gpu_time_sin:.6f} seconds")

import numpy as np
import time
from GPUPy.src.numerical_methods.root_finding import bisection
from GPUPy.src.numerical_methods.utils import benchmark

def alternative_func(x):
    return np.exp(x) - 5  # Changes sign between x=1 and x=2

try:
    cpu_time_alt = benchmark(bisection, alternative_func, a=1, b=2, tolerance=1e-6, max_iterations=100, use_gpu=False)
    gpu_time_alt = benchmark(bisection, alternative_func, a=1, b=2, tolerance=1e-6, max_iterations=100, use_gpu=True)

    print(f" Function Bisection CPU Time: {cpu_time_alt:.6f} seconds")
    print(f" Function Bisection GPU Time: {gpu_time_alt:.6f} seconds")
except ValueError as e:
    print(f"Error: {e}")



"""# Yeni Bölüm"""